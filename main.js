
import { readAll } from 'https://deno.land/std@0.150.0/streams/conversion.ts';

import { TwitchChat } from 'https://deno.land/x/tmi@v1.0.5/mod.ts';
import { serve } from 'https://deno.land/std@0.98.0/http/server.ts';

import { diagram, gif } from './components/diagram.js';

import { log, resolve, reloadActions } from './parser.js';
import { help } from './help.js';
import { map } from './map.js';
import { Streamer, SETUP } from './config.js';

// ==== Actions ============================

import './actions/info.js';
import './actions/queue.js';
import './actions/ratings.js';
import './actions/video.js';

// ==== Tasks ==============================

import './tasks/discord.js';

// =========================================

// twitch bot:
export const chat = new TwitchChat(
	Deno.env.get('TWITCH_OAUTH_BOT'), 'en_passant_bot'
);
// current scopes generated by https://twitchapps.com/tokengen/:
// https://dev.twitch.tv/docs/authentication/scopes#twitch-access-token-scopes
// channel:read:subscriptions
// moderation:read moderator:read:chat_settings
// channel:moderate
// chat:edit chat:read
// whispers:read whispers:edit
export let channel = null;
try {
	await chat.connect();
	channel = chat.joinChannel(Streamer);
	channel.addEventListener('privmsg', data => resolve(data, channel));
} catch (e) { console.error(e); }
reloadActions(); // loads the twitch actions from database
log('status', 'twitch chat connected');

// =========================================

const server = serve({ port: 8080 });

(async () => {
	for await (const request of server) {
		switch (request.url) {
			case '/fen': case '/fen/': case '/diagram/': case '/diagram': {
				const data = await readAll(request.body);
				try {
					const json = JSON.parse(new TextDecoder().decode(data));
					const fen = json.fen || SETUP;
					const image = await diagram(fen, json.perspective);
					if (image != null)
						request.respond({ status: 200, body: image });
					else request.respond({ status: 404, body: 'Not found' });
				} catch { request.respond({ status: 404, body: 'Not found' }); }
			} break;
			case '/pgn': case '/pgn/': {
				const data = await readAll(request.body);
				try {
					const json = JSON.parse(new TextDecoder().decode(data));
					const pgn = json.pgn || '';
					const image = await gif(pgn, json.perspective);
					if (image != null)
						request.respond({ status: 200, body: image });
					else request.respond({ status: 404, body: 'Not found' });
				} catch { request.respond({ status: 404, body: 'Not found' }); }
			} break;
			case '/map': case '/map/':
				request.respond({ status: 200, body: map() });
			break;
			case '/mod': case '/mod/':
				await reloadActions();
				request.respond({ status: 200, body: help(true) });
			break;
			default:
				await reloadActions();
				request.respond({ status: 200, body: help() });
			break;
		}
	}
})();
log('status', 'server connected');
