
import { readAll } from 'https://deno.land/std@0.150.0/streams/conversion.ts';

import { TwitchChat } from 'https://deno.land/x/tmi_beta@v0.1.2/mod.ts';

import { diagram, gif } from './components/diagram.js';

import { log, resolve, reloadActions } from './parser.js';
import { help } from './help.js';
import { Streamer, SETUP, StreamerID } from './config.js';
import { Server, ROOT } from './server.js';

// ==== Actions ============================

import './actions/info.js';
import './actions/queue.js';
import './actions/ratings.js';
import './actions/video.js';

// ==== Tasks ==============================

import './tasks/discord.js';
import './tasks/drop.js';

// =========================================

// twitch bot:
export const chat = new TwitchChat(Deno.env.get('TWITCH_OAUTH_BOT'));
// current scopes generated by https://twitchapps.com/tokengen/:
// https://dev.twitch.tv/docs/authentication/scopes#twitch-access-token-scopes
// channel:moderate moderation:read moderator:read:chat_settings
// moderator:manage:chat_settings moderator:manage:chat_messages
// moderator:manage:announcements moderator:manage:banned_users
// chat:edit chat:read whispers:read whispers:edit
// user:manage:whispers user:manage:chat_color
export let channel = null;
try {
	await chat.connect();
	channel = chat.join(Streamer, StreamerID);
	channel.listener('privmsg', data => resolve(data, channel));
} catch (e) {
	console.error(e);
	Deno.exit(1);
}
reloadActions(); // loads the twitch actions from database
log('status', 'twitch chat connected');

// =========================================

const server = new Server();

server.listen([ 'fen', 'diagram' ], async request => {
	const data = await readAll(request.body);
	try {
		const json = JSON.parse(new TextDecoder().decode(data));
		const fen = json.fen || SETUP;
		const image = await diagram(fen, json.perspective);
		if (image != null) return { status: 200, body: image };
		else return { status: 404, body: 'Not found' };
	} catch { return { status: 404, body: 'Not found' }; }
});

server.listen('pgn', async request => {
	const data = await readAll(request.body);
	try {
		const json = JSON.parse(new TextDecoder().decode(data));
		const pgn = json.pgn || '';
		const image = gif(pgn, json.perspective);
		if (image != null) return { status: 200, body: image };
		else return { status: 404, body: 'Not found' };
	} catch { return { status: 404, body: 'Not found' }; }
});

server.listen('mod', () => ({ status: 200, body: help(true) }));

server.listen('map', () => ({
	headers: { 'Content-Type': 'text/html' },
	status: 200, body: Deno.readFileSync('/map.html')
}));
server.listen('training', () => ({
	headers: { 'Content-Type': 'text/html' },
	status: 200, body: Deno.readFileSync('/training.html')
}));

server.listen(ROOT, () => ({ status: 200, body: help() }));

server.start();
log('status', 'server connected');
